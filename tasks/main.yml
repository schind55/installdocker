# Dependencies

  - name: print operating system
    ansible.builtin.debug:
      var: ansible_facts['distribution']

  - name: Update packages Debian
    become: true
    raw: apt-get update
    when: ansible_facts['os_family'] == "Debian"

  - name: Install ufw
    apt:
      name: ufw
      state: present
    when: ansible_facts['os_family'] == "Debian"


  - name: Disable firewall for centos
    become: true
    ansible.builtin.service:
      name: firewalld
      enabled: false
    when: ansible_facts['distribution'] == "CentOS"

  - name: Register firewall for ubuntu
    ufw:
      state: disabled
    when: ansible_facts['distribution'] == "Ubuntu"


  - name: Install SELinux-policy for RedHat
    become: true
    yum:
      name: selinux-policy-doc.noarch
      state: present
    when: ansible_facts['os_family'] == "RedHat"

  - name: Put SELinux in permissive mode centos
    selinux:
      #policy: targeted
      state: disabled
    when: ansible_facts['distribution'] == "CentOS"

  - name: Rebbot for change to take affect RedHat
    become: true
    ansible.builtin.service:
      name: selinux
      enabled: restarted
    when: ansible_facts['distribution'] == "RedHat"

    # swap is still on, when swapon -s nothing should be dieplayed
  - name: Disable swap Ubuntu
    raw: swapoff -a; sed -i '/swap/d' /etc/fstab
    when: ansible_facts['distribution'] == "NotDefined"

  - name: Safe whoami
    raw: whoami
    register: username

  - name: Print whoami
    debug:
      var=username

  - name: Disable swap (if configured).
    command: swapoff -a
    #tags: ['skip_ansible_lint']

  - name: Ensure swap file doesn't exist (if configured).
    file:
      path: /swapfile
      state: absent

  - name: Disable SWAP RedHat 1/2
    become: true
    raw: swapoff -a
    when: ansible_facts['os_family'] == "Debian"

  - name: Disable SWAP RedHat 2/2
    replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
      replace: '# \1'
    when: ansible_facts['os_family'] == "Debian"


#  - name: ensure net.bridge.bridge-nf-call-ip6tables is set to 1
#    sysctl:
#      name: net.bridge.bridge-nf-call-ip6tables
#      value: 1
#      state: present

#  - name: ensure net.bridge.bridge-nf-call-iptables is set to 1
#    sysctl:
#      name: net.bridge.bridge-nf-call-iptables
#      value: 1
#      state: present

  - name: Add the iptables rule to sysctl.conf
    raw: echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
  
  - name: Safe settings
    raw: sysctl --system
    
# Rolle    

  - name: Install gpg-agent Debian
    apt:
      name: gpg-agent
      state: present
    when: ansible_facts['os_family'] == "Debian"

  - name: Add Docker apt key
    become: true
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
      state: present
    when: ansible_facts['distribution'] == "Ubuntu"

  - name: Add docker apt repo
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_lsb.codename}} stable"
      update_cache: yes
    when: ansible_facts['os_family'] == "Debian"

  - name: Install Docker apt package
    become: true
    apt:
      pkg: docker-ce
      state: latest
      update_cache: yes    
    when: ansible_facts['os_family'] == "Debian"

  - name: Start docker
    become: true
    service: 
      name: docker
      state: restarted

  - name: Verify docker is installed
    become: true
    raw: docker run hello-world # rm -rf /var/lib/docker/ &&  davor
    when: ansible_facts['os_family'] == "Debian"
